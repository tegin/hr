# Copyright 2021 Creu Blanca
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).

from odoo import api, fields, models, _
from odoo.tools import float_compare
from odoo.exceptions import UserError

class HrEmployeeMaterial(models.Model):

    _inherit = 'hr.employee.material'

    location_id = fields.Many2one(related="material_request_id.location_id")
    procurement_group_id = fields.Many2one(
        'procurement.group', 'Procurement Group', readonly=True,
        states={'draft': [('readonly', False)]},
        help="Moves created through this stock request will be put in this "
             "procurement group. If none is given, the moves generated by "
             "procurement rules will be grouped into one big picking.",
    )

    def _skip_procurement(self):
        return self.state != 'draft' or \
               self.product_id.type not in ('consu', 'product')

    def _prepare_procurement_values(self, group_id=False):

        """ Prepare specific key for moves or other components that
        will be created from a procurement rule
        coming from a stock request. This method could be override
        in order to add other custom key that could be used in
        move/po creation.
        """
        print(self.employee_id.user_id.partner_id.name)
        return {
            'group_id': group_id or self.procurement_group_id.id or False,
            'partner_id': self.employee_id.user_id.partner_id.id
        }

    @api.multi
    def _action_launch_procurement_rule(self):
        """
        Launch procurement group run method with required/custom
        fields generated by a
        material request. procurement group will launch '_run_move',
        '_run_buy' or '_run_manufacture'
        depending on the stock request product rule.
        """
        errors = []
        for allocation in self:
            if allocation._skip_procurement():
                continue

            values = allocation._prepare_procurement_values(group_id=allocation.procurement_group_id)
            try:
                # We launch with sudo because potentially we could create
                # objects that the user is not authorized to create, such
                # as PO.
                self.env['procurement.group'].sudo().run(
                    allocation.product_id, allocation.quantity,
                    allocation.product_uom_id,
                    allocation.location_id, allocation.name,
                    allocation.name, values)
            except UserError as error:
                errors.append(error.name)
        if errors:
            raise UserError('\n'.join(errors))
        return True
